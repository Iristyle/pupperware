pool:
  # self-hosted agent on Windows 10 1709 environment
  # includes newer Docker engine with LCOW enabled, new build of LCOW image
  # includes Ruby 2.5, Go 1.10, Node.js 10.10, hadolint
  name: Default

variables:
  BUILD_REPOSITORY: 127.0.0.1

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  clean: true  # whether to fetch clean each time
- powershell: |
    $line = '=' * 80
    Write-Host "$line`nWindows`n$line`n"
    Get-ComputerInfo |
      select WindowsProductName, WindowsVersion, OsHardwareAbstractionLayer |
      Out-String |
      Write-Host
    #
    # Azure
    #
    Write-Host "`n`n$line`nAzure`n$line`n"
    Invoke-RestMethod -Headers @{'Metadata'='true'} -URI http://169.254.169.254/metadata/instance?api-version=2017-12-01 -Method Get |
      ConvertTo-Json -Depth 10 |
      Write-Host
    #
    # Docker
    #
    Write-Host "`n`n$line`nDocker`n$line`n"
    docker version
    docker images
    docker info
    sc.exe qc docker
    #
    # Ruby
    #
    Write-Host "`n`n$line`nRuby`n$line`n"
    ruby --version
    gem --version
    bundle --version
    #
    # Environment
    #
    Write-Host "`n`n$line`nEnvironment`n$line`n"
    Get-ChildItem Env: | % { Write-Host "$($_.Key): $($_.Value)"  }
  displayName: Diagnostic Host Information
  name: hostinfo
- powershell: |
    bundle install --with test --path '.bundle/gems'
    # heavy handed approach to use the correct compose file
    Copy-Item ./docker-compose.azure.yml ./docker-compose.yml -Force
    # . ./docker/ci/build.ps1
    # Invoke-ContainerBuildSetup
  displayName: Prepare Test Environment
  name: test_prepare
- powershell: |
    echo "PUPPETDB_HOST=$(puppetdb_host)" | Out-File '.env' -Append
    echo "PUPPETDB_USER=$(puppetdb_user)" | Out-File '.env' -Append
    echo "PUPPETDB_PASSWORD=$(puppetdb_password)" | Out-File '.env' -Append
    Get-Content -Path '.env'
    bundle exec rspec spec
    # . ./docker/ci/build.ps1
    # Invoke-ContainerTest -Name pupperware -Repository $ENV:BUILD_REPOSITORY
  displayName: Test pupperware
  name: test_pupperware
- task: PublishTestResults@2
  displayName: Publish pupperware test results
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '/TEST-rspec.xml'
    testRunTitle: pupperware Test Results
- powershell: |
    docker container prune --force
    docker image prune --filter "dangling=true" --force
  displayName: Container Cleanup
  condition: always()
